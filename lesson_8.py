#1. Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год». В рамках класса реализовать два метода. Первый, с декоратором @classmethod, должен извлекать число, месяц, год и преобразовывать их тип к типу «Число». Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца и года (например, месяц — от 1 до 12). Проверить работу полученной структуры на реальных данных.

class Date:
    def __init__(self, data):
        self.data = str(data)

    @classmethod
    def unpack(cls, data):
        my_data = []

        for i in data.split('-'):
            my_data.append(i)
        return int(my_data[0]), int(my_data[1]), int(my_data[2])

    @staticmethod
    def check_data(day, month, year):

        if 1 <= day <= 31:
            if 1 <= month <= 12:
                if 2019 >= year >= 0:
                    return f'ok'
                else:
                    return f'ввелите корректно год'
            else:
                return f'ввелите корректно месяц'
        else:
            return f'Нввелите корректно день'

    def __str__(self):
        return f'Дата {Date.unpack(self.data)}'


d = Date('11 - 12 - 2020')
print(d)
print(Date.check_data(11, 11, 2002))


#2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на нуль. Проверьте его работу на данных, вводимых пользователем. При вводе пользователем нуля в качестве делителя программа должна корректно обработать эту ситуацию и не завершиться с ошибкой.
class OwnError(Exception):
    def __init__(self, txt):
        self.txt = txt

inp_data1 = int(input("Введите делимое: "))
inp_data2 = int(input("Введите делитель: "))

try:
    if inp_data2 == 0:
        raise OwnError("Деление на 0!")
except OwnError as err:
    print(err)
else:
    print(f"Все хорошо: {inp_data1/inp_data2}")

#3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список. Класс-исключение должен контролировать типы данных элементов списка.
#Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
#Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.
class OwnError(Exception):
    def __init__(self, my_list):
        self.my_List = my_list

lst = []
while True:
    value = input('Введите число в список:')
    if value == 'q':
        break
    try:
        if not value.isdigit():
            raise OwnError("Не число")
    except OwnError as err:
            print(err)
    else:
            lst.append(int(value))
print(lst)

#7. Реализовать проект «Операции с комплексными числами». Создайте класс «Комплексное число», реализуйте перегрузку методов сложения и умножения комплексных чисел. Проверьте работу проекта, создав экземпляры класса (комплексные числа) и выполнив сложение и умножение созданных экземпляров. Проверьте корректность полученного результата.
class Complex:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def __add__(self, other):
        print(f'Сумма {self.a + other.a} + {self.b + other.b} * i')

    def __mul__(self, other):
       print(f'Произведение {self.a * other.a - (self.b * other.b)} + {self.b * other.a} * i')



a = Complex(1, -2)
b = Complex(3, 4)

a + b
a * b

#4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад. А также класс «Оргтехника», который будет базовым для классов-наследников. Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс). В базовом классе определить параметры, общие для приведенных типов. В классах-наследниках реализовать параметры, уникальные для каждого типа оргтехники.
#5. Продолжить работу над первым заданием. Разработать методы, отвечающие за приём оргтехники на склад и передачу в определенное подразделение компании. Для хранения данных о наименовании и количестве единиц оргтехники, а также других данных, можно использовать любую подходящую структуру, например словарь.
#6. Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых пользователем данных. Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
#Подсказка: постарайтесь по возможности реализовать в проекте «Склад оргтехники» максимум возможностей, изученных на уроках по ООП.

class Store:

    def __init__(self, name, price, quantity):
        self.name = name
        self.price = price
        self.quantity = quantity
        self.my_s = []
        self.my_u = {'Название': self.name, 'Цен': self.price, 'Количество': self.quantity}

    def __str__(self):
        return f'{self.name} цена {self.price} количество {self.quantity}'

    def rec(self):
        try:
            a = input(f'Название ')
            a_p = int(input(f'Цена '))
            a_q = int(input(f'Количество '))
            u = {'Название': a, 'Цена': a_p, 'Количество': a_q}
            self.my_u.update(u)
            self.my_s.append(self.my_u)
            print(f'Сейчас на складе: {self.my_s}')
        except:
            return f'Ошибка'
        q = input(f'Выход - Q ')
        if q == 'Q':
            print(f'Склад {self.my_s}')
            return Store.rec(self)


class Printer(Store):
    def print(self):
        return f'to print {self.name}'


class Scanner(Store):
    def scan(self):
        return f'to scan {self.name}'


class Copier(Store):
    def copier(self):
        return f'to copier {self.name}'