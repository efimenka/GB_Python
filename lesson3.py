#1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
def delenie(a, b):
    try:
        c = a/b
        return c
    except (ZeroDivisionError, NameError):
        return "Error"
print(delenie(4, 2))
print(delenie(4, 0))
#2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. Реализовать вывод данных о пользователе одной строкой.
def info(name, surname, year, city, email, phone):
    print(f"{name} {surname}, {year}, {city}, {email}, {phone}.")


info(name='Иван', surname='Иванов', year=1989, city='Москва', email='1@gmail.com', phone='111-11-11')

#3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух аргументов.
def my_func(a, b, c):
    d = [a, b, c]
    d = sorted(d, reverse=True)
    return d[0] + d[1]


print(my_func(3, 2, 4))

#4. Программа принимает действительное положительное число x и целое отрицательное число y. Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y). При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
#Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. Второй — более сложная реализация без оператора **, предусматривающая использование цикла.
def my_func(a, b):
    if a > 0 and b < 0:
        b = abs(b)
        return round(1 / (a ** b), 5)
    else:
        return "Error"


print(my_func(-2, - 2))


def my_func(a, b):
    if a > 0 and b < 0:
        b = abs(b)
        c = 1
        for i in range(0, b):
            c = (1 / a) * c
        return round(c, 5)
    else:
        return "Error"


print(my_func(2, - 2))
#5. Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter. Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ, выполнение программы завершается. Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.
a = 0
c = 0
while a != '#':
    a = list(input('Введите числа или Q: ').split())
    if a == ['Q'] or a == ['q']:
        print(c)
        break
    else:
        result = [int(item) for item in a]
        d = sum(result)
        print(d)
        c = c + d
        print(c)

#6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
#Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом. Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы. Необходимо использовать написанную ранее функцию int_func().

def int_func(s):
    alphabet = ["а", "б", "в", "г", "д", "е", "ё", "ж", "з", "и", "й", "к", "л", "м", "н", "о",
                "п", "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ", "ъ", "ы", "ь", "э", "ю", "я"]
    s_1 = list(s.split())
    return [str(item).capitalize() for item in s_1 if item[0] not in alphabet]


print(int_func('hhh gggggggg вввввввввв'))